@page "/weather"
@using BlazorBootstrap
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject Web.PostsApi PostsApi 

<PageTitle>Posts</PageTitle>

<div>
    <h1>Posts</h1>
    <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Show Modal</Button>
    </div>

<Modal @ref="modal" Title="Modal title">
    <BodyTemplate>
        Modal body text goes here.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary">Save changes</Button>
    </FooterTemplate>
</Modal>

@if (_posts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Author</th>
            <th>Title</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var post in _posts)
        {
            <tr>
                <td>@post.id</td>
                <td>@post.Author</td>
                <td>@post.Title</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private PostModel[]? _posts;
    
    [SupplyParameterFromForm]
    public PostModel? NewPost { get; set; }
    private Modal modal;

    private async Task OnShowModalClick()
    {
        await modal?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        _posts = await PostsApi.GetPostsAsync();
    }
    
    protected async Task AddPost()
    {
        if(NewPost is null)
        {
            
        }
        await PostsApi.AddPostAsync(new CreatePostModel(Title: NewPost.Title, Author: NewPost.Author));
    }
    
}